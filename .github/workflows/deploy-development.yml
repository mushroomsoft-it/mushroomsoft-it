name: CI with OpenID Connect

on:
  push:
    branches: [master]

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  build:
    name: GitHub Actions - Deploy to Azure Blob Storage - Development
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create and Publish versions
        id: changesets
        uses: changesets/action@v1.4.1
        with:
          version: npm run version-packages
          commit: "chore: update versions"
          title: "chore: update versions"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Extract version for tagging and naming artifacts
      - name: Extract Version
        id: extract-version
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.extract-version.outputs.VERSION }}

  publish-artifacts:
    needs: build
    if: needs.build.outputs.version != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Deployment Package
        run: |
          cd dist/browser
          zip -r ../../mushroomsoft-app-${{ needs.build.outputs.version }}.zip ./*
          cd ../..

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mushroomsoft-app-${{ needs.build.outputs.version }}
          path: mushroomsoft-app-${{ needs.build.outputs.version }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          files: mushroomsoft-app-${{ needs.build.outputs.version }}.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      version: ${{ needs.build.outputs.version }}

  deploy-specific-version:
    name: Deploy Specific Version
    needs: publish-artifacts
    if: needs.publish-artifacts.outputs.version != ''
    runs-on: ubuntu-latest

    steps:
      - name: Prepare Version
        id: prepare-version
        run: |
          VERSION="${{ needs.publish-artifacts.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          RELEASE_TAG="v$VERSION"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT

          # Set zip filename
          ZIP_FILENAME="mushroomsoft-app-$VERSION.zip"
          echo "ZIP_FILENAME=$ZIP_FILENAME" >> $GITHUB_OUTPUT

          echo "Preparing to deploy version $VERSION (release tag: $RELEASE_TAG)"

      # Download the specific release artifact
      - name: Download Release Asset
        id: download-asset
        uses: dsaltares/fetch-gh-release-asset@v1.2.3
        with:
          version: ${{ steps.prepare-version.outputs.RELEASE_TAG }}
          file: ${{ steps.prepare-version.outputs.ZIP_FILENAME }}
          target: ${{ steps.prepare-version.outputs.ZIP_FILENAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Install unzip if needed
      - name: Install Unzip
        run: sudo apt-get install -y unzip

      # Extract the zip file
      - name: Extract Release Package
        run: |
          mkdir -p ./deploy-content
          unzip ${{ steps.prepare-version.outputs.ZIP_FILENAME }} -d ./deploy-content
          echo "Contents of extracted package:"
          ls -la ./deploy-content

      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --auth-mode login \
            -d '$web' \
            -s ./deploy-content

      # Azure logout
      - name: Azure CLI logout
        run: az logout
        if: always()
